This is the test file for the class BaseGeometry.

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

>>> bg.integer_validator("age", 10)

>>> bg.integer_validator("length", -5) # doctest: +ELLIPSIS
Traceback (most recent call last):
    ...
ValueError: ... must be greater than 0

>>> bg.integer_validator("width", "5") # doctest: +ELLIPSIS
Traceback (most recent call last):
    ...
TypeError: ... must be an integer

>>> bg.integer_validator("height", 0) # doctest: +ELLIPSIS
Traceback (most recent call last):
    ...
ValueError: ... must be greater than 0

>>> bg.integer_validator("distance", 15)

>>> bg.integer_validator("count", 1)

>>> bg.integer_validator("count", None) # doctest: +ELLIPSIS
Traceback (most recent call last):
    ...
TypeError: ... must be an integer

>>> bg.integer_validator("volume", 0.5) # doctest: +ELLIPSIS
Traceback (most recent call last):
    ...
TypeError: ... must be an integer

>>> bg.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented

>>> bg.integer_validator("height", {4, 3}) # doctest: +ELLIPSIS
Traceback (most recent call last):
    ...
TypeError: ... must be an integer

>>> bg.integer_validator("test", float('inf')) # doctest: +ELLIPSIS
Traceback (most recent call last):
  ...
    raise TypeError("{} must be an integer".format(name))
TypeError: ... must be an integer

>>> bg.integer_validator("name", [1, 2, 3]) # doctest: +ELLIPSIS
Traceback (most recent call last):
    raise TypeError("{} must be an integer".format(name))
TypeError: ... must be an integer

>>> bg.integer_validator("name", (1, 3)) # doctest: +ELLIPSIS
Traceback (most recent call last):
  ...
    raise TypeError("{} must be an integer".format(name))
TypeError: ... must be an integer

>>> bg.integer_validator("name", 1, 2, 3) # doctest: +ELLIPSIS
Traceback (most recent call last):
  ...
TypeError: BaseGeometry.integer_validator() takes ... positional arguments but ... were given